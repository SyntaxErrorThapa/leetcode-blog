{"ast":null,"code":"var _jsxFileName = \"/home/turtle/gitprojects/leetcode-blog/leetcode/client/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport Header from \"./components/header\";\nimport Introduction from \"./components/Introduction\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [message, setMessage] = useState({\n    no: \"\"\n  });\n  useEffect(() => {\n    fetch(\"/api\") // Fetch from the /\n    .then(response => response.json()) // Process the extract to response with JSON data \n    .then(data => setMessage({\n      no: data.no,\n      description: data.description\n    })); // Take the extracted data and set the message\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Introduction, {\n      no: message.no,\n      description: message.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"MwURuxIxfzKstuaEAAicM09jVSY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Header","Introduction","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","message","setMessage","no","fetch","then","response","json","data","description","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/turtle/gitprojects/leetcode-blog/leetcode/client/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport React, { useEffect, useState} from \"react\";\nimport Header from \"./components/header\";\nimport Introduction from \"./components/Introduction\";\nfunction App() {\n  const [message, setMessage] = useState({ no: \"\"});\n\n  useEffect(() => {\n    fetch(\"/api\") // Fetch from the /\n      .then((response) => response.json()) // Process the extract to response with JSON data \n      .then((data) => setMessage({no : data.no, description : data.description})); // Take the extracted data and set the message\n  }, []); \n\n  return (\n    <>\n      <Header />\n      <Introduction no={message.no} description={message.description}/>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AACjD,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,YAAY,MAAM,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACrD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC;IAAEW,EAAE,EAAE;EAAE,CAAC,CAAC;EAEjDZ,SAAS,CAAC,MAAM;IACda,KAAK,CAAC,MAAM,CAAC,CAAC;IAAA,CACXC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;IAAA,CACpCF,IAAI,CAAEG,IAAI,IAAKN,UAAU,CAAC;MAACC,EAAE,EAAGK,IAAI,CAACL,EAAE;MAAEM,WAAW,EAAGD,IAAI,CAACC;IAAW,CAAC,CAAC,CAAC,CAAC,CAAC;EACjF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEb,OAAA,CAAAE,SAAA;IAAAY,QAAA,gBACEd,OAAA,CAACH,MAAM;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVlB,OAAA,CAACF,YAAY;MAACS,EAAE,EAAEF,OAAO,CAACE,EAAG;MAACM,WAAW,EAAER,OAAO,CAACQ;IAAY;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA,eACjE,CAAC;AAEP;AAACd,EAAA,CAfQD,GAAG;AAAAgB,EAAA,GAAHhB,GAAG;AAiBZ,eAAeA,GAAG;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}